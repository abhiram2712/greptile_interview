// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Project {
  id          String      @id @default(cuid())
  name        String
  githubUrl   String
  owner       String
  repo        String
  slug        String?     @unique
  description String?
  isPublic    Boolean     @default(true)
  showSummary Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  changelogs  Changelog[]
  commits     Commit[]
  context     ProjectContext?
}

model Changelog {
  id          String      @id @default(cuid())
  projectId   String
  date        DateTime
  version     String?
  summary     String
  content     String
  author      String
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  commits     ChangelogCommit[]
}

model Commit {
  id          String      @id @default(cuid())
  projectId   String
  sha         String
  message     String
  author      String
  date        DateTime
  
  // New fields for context
  diff        String?
  filesChanged Json?      // Array of file paths
  additions   Int?
  deletions   Int?
  
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  changelogs  ChangelogCommit[]
  fileSnapshots FileSnapshot[]
  
  @@unique([projectId, sha])
}

model FileSnapshot {
  id          String      @id @default(cuid())
  commitId    String
  filePath    String
  content     String
  language    String?
  
  commit      Commit      @relation(fields: [commitId], references: [id], onDelete: Cascade)
  
  @@index([commitId, filePath])
}

model ProjectContext {
  id          String      @id @default(cuid())
  projectId   String      @unique
  readme      String?
  structure   Json?       // Repository tree
  mainFiles   Json?       // Key entry points
  techStack   Json?       // Detected technologies
  summary     String?     // AI-generated project summary
  status      String      @default("pending") // pending, indexing, ready, failed
  updatedAt   DateTime    @updatedAt
  
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ChangelogCommit {
  changelogId String
  commitId    String
  
  changelog   Changelog   @relation(fields: [changelogId], references: [id], onDelete: Cascade)
  commit      Commit      @relation(fields: [commitId], references: [id], onDelete: Cascade)
  
  @@id([changelogId, commitId])
}